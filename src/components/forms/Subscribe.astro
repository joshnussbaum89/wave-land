---
import Icon from 'astro-icon'

export interface Props {
  formId: string | 'subscribe'
  theme: 'light' | 'dark'
}

const { theme, formId } = Astro.props
---

<form
  id={formId}
  class:list={['subscribe', { light: theme === 'light', dark: theme === 'dark' }]}
  method="POST"
  autocomplete="off"
>
  <div class="form-group">
    <div class="email-input">
      <input
        id={`${formId}-email`}
        type="email"
        name={`${formId}-email`}
        placeholder=" "
        required
      />
      <label for={`${formId}-email`}>Email Address</label>
    </div>
    <button type="submit" name="subscribe" aria-label="Subscribe">
      <Icon name="input-arrow" />
    </button>
  </div>
  <p class="response-message"></p>
</form>

<style>
  .subscribe {
    position: relative;

    &.dark {
      --color-foreground: var(--color-white);
    }

    &.light {
      --color-foreground: var(--color-black);
    }

    & .response-message {
      padding: 0.5rem;
      font-size: var(--size-xs);

      &.error {
        color: var(--color-error);
      }
    }
  }

  .form-group {
    position: relative;
    display: flex;
    align-items: center;
    font-size: clamp(var(--size-xs), 2vw, var(--size-sm));

    & .email-input,
    & input {
      width: 100%;
    }

    & input {
      padding: 1rem 0.5rem;
      color: var(--color-foreground);
      background-color: transparent;
      border-top: none;
      border-right: none;
      border-bottom: 2px solid var(--color-foreground);
      border-left: none;
      border-radius: 0;
      outline: none;
      transition: all var(--transition-normal);

      &:focus + label,
      &:not(:placeholder-shown) + label {
        top: -0.5rem;
        left: 0;
      }

      &:focus + label,
      &:valid + label {
        color: var(--color-foreground);
      }

      &:not(:placeholder-shown):not(:valid) + label {
        color: var(--color-error);
      }
    }

    & label {
      position: absolute;
      top: 48%;
      left: 0.5rem;
      transform: translateY(-50%);
      color: var(--color-grey-200);
      transition: all var(--transition-normal);
    }

    & button {
      position: absolute;
      right: 0;
      background-color: transparent;
      border: none;
      cursor: pointer;

      & [astro-icon='input-arrow'] {
        width: 1rem;
      }
    }
  }
</style>

<script define:vars={{ formId }}>
  document.addEventListener('astro:page-load', () => {
    const form = document.querySelector(`#${formId}`)
    const responseMessage = form?.querySelector('.response-message')

    // Submit handler
    async function submit(e) {
      e.preventDefault()

      // Get form data
      const formData = new FormData(e.target)

      // Show loading message
      responseMessage.classList.remove('success')
      responseMessage.classList.remove('error')
      responseMessage.textContent = 'Loading...'

      // Send form data to API
      const response = await fetch('/api/subscribe/', {
        method: 'POST',
        body: formData,
      })

      const data = await response.json()

      // Error subscribing
      if (data.error) {
        responseMessage.classList.remove('success')
        responseMessage.classList.add('error')
        responseMessage.textContent = data.error
      }

      // Successful subscription
      if (data.message) {
        responseMessage.classList.remove('error')
        responseMessage.classList.add('success')
        responseMessage.innerHTML = `${data.message}. Click <a href="/files/website-audit-checklist.pdf" class="site-link" aria-label="download your free Website Audit Checklist" download>here</a> to download your free Website Audit Checklist ðŸŒŠ`
      }

      form?.reset()
    }

    // Submit event listener
    form?.addEventListener('submit', submit)
  })
</script>
